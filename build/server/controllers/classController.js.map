{"version":3,"sources":["../../../api/server/controllers/classController.js"],"names":["util","Util","ClassController","req","res","ClassService","getAllClasses","classList","Object","values","length","setSuccess","send","setErro","setError","message","body","classYear","classId","classMasterTeacher","classSection","classLevel","newClass","AddClass","addingClass","id","params","classService","deleteClass","deletedClass","updated","updateClass","updated_class","getOneClass","oneClass"],"mappings":"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","sourcesContent":["import ClassService from '../services/classServices';\nimport Util from '../utils/Util';\nimport classService from '../services/classServices';\nconst util = new Util();\n\nclass ClassController {\n    static async getListClass(req, res) {\n        try {\n            const classList = await ClassService.getAllClasses();\n            if (Object.values(classList).length >= 1) {\n                util.setSuccess(\"Classes Found\", 200, classList);\n                return util.send(res);\n\n            } else {\n                util.setErro(\"Classes Not Found\", 200, {});\n                return util.send(res);\n            }\n            return util.send(res);\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n\n    }\n    static async addClasses(req, res) {\n        try {\n            if (!req.body.classYear || !req.body.classId || !req.body.classMasterTeacher || !req.body.classSection || !req.body.classLevel) {\n                util.setError(400, 'Please send accurate info');\n                return util.send(res);\n            } else {\n                const newClass = req.body;\n                const addingClass = await ClassService.AddClass(newClass);\n                util.setSuccess('Class added', 201, addingClass);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async deleteClasses(req, res) {\n        const {\n            id\n        } = req.params;\n        if (id == null) {\n            util.setError(404, 'Please provide a valid parameter');\n            return util.send(res);\n        } else {\n            try {\n                const deletedClass = await classService.deleteClass(id);\n                if (!deletedClass) {\n                    util.setError(404, `Class with Id ${id} not found`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess(`Class with Id ${id} deleted successfully`, 200, deletedClass);\n                    return util.send(res);\n                }\n\n            } catch (error) {\n                util.setError(404, `can't delete the class >> ${error.message}`);\n                return util.send(res);\n            }\n\n\n\n        }\n    }\n    static async updateClass(req, res) {\n        const {\n            id\n        } = req.params;\n        const updated = req.body;\n        if (id == null) {\n            util.setError(404, 'Please provide a valid parameter');\n            return util.send(res);\n\n        } else {\n            try {\n\n                if ((Object.values(updated).length >= 1) == false) {\n                    util.setError(404, `sent empty fields`);\n                    return util.send(res);\n                } else {\n                    const updated_class = await classService.updateClass(id, updated);\n                    if (Object.values(updated_class).length >= 1) {\n                        util.setSuccess('Classes updated successfully', 200, updated_class);\n                        return util.send(res);\n\n                    } else {\n                        util.setError(404, `cant update a class`);\n                        return util.send(res);\n                    }\n\n                }\n\n            } catch (error) {\n                util.setError(404, 'Oops something Went wrong cant update the book >> ' + error.message);\n                return util.send(res);\n            }\n        }\n    }\n    static async getOneClass_(req, res) {\n        const {\n            id\n        } = req.params;\n\n        try {\n            const oneClass = await ClassService.getOneClass(id);\n\n            if (Object.values(oneClass).length >= 1) {\n                util.setSuccess(`Class is found`, 200, oneClass);\n                return util.send(res);\n            } else {\n                util.setError(404, `Can't find the class with Id ${id}`);\n                return util.send(res);\n            }\n\n        } catch (error) {\n            util.setError(404, `Can't find the class with Id ${id}`);\n            return util.send(res);\n        }\n    }\n}\n\nexport default ClassController;"],"file":"classController.js"}