{"version":3,"sources":["../../../api/server/controllers/termController.js"],"names":["util","Util","termController","req","res","termService","getAll","all","Object","values","length","setError","send","setSuccess","message","id","params","getOne","one","deleter","deleted","updated","body","updater","updated_class","newRecord","getOneComplex","query","classId","term","studentId","course","lookUp","addNew","added"],"mappings":"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","sourcesContent":["import termService from '../services/termServices';\nimport Util from '../utils/Util';\n\nconst util = new Util();\nclass termController {\n\n\n    static async getAll(req, res) {\n        try {\n            const all = await termService.getAll();\n            if (Object.values(all).length < 1) {\n                util.setError(400, \"Records can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Records found successfully\", 200, all);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async getParticular(req, res) {\n        try {\n            const id = req.params;\n            const one = await termService.getOne(id);\n            if (!one) {\n                util.setError(400, \"Term can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Term found\", 200, one);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async deleteTerm(req, res) {\n        try {\n            const id = req.params;\n            const deleted = await termService.deleter(id);\n            if (!deleted) {\n                util.setError(400, \"Term can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Deleted successfully\", 200, deleted);\n                return util.send(res);\n            }\n        } catch (error) {\n\n        }\n    }\n    static async updateTerm(req, res) {\n        const {\n            id\n        } = req.params;\n        const updated = req.body;\n\n        try {\n\n            if ((Object.values(updated).length >= 1) == false) {\n                util.setError(404, `sent empty fields`);\n                return util.send(res);\n            } else {\n                const updated_class = await termService.updater(id, updated);\n                if (!updated_class) {\n                    util.setError(404, `cant update a class`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess('records updated successfully', 200, updated_class);\n                    return util.send(res);\n                }\n\n            }\n\n        } catch (error) {\n            util.setError(404, 'Oops something Went wrong cant update the book >> ' + error.message);\n            return util.send(res);\n        }\n\n    }\n    static async addNewRecord(req, res) {\n        try {\n            const newRecord = req.body;\n            const lookUp = await termService.getOneComplex(req.query.classId, req.query.term, req.query.studentId, req.query.course);\n            if (Object.values(lookUp).length >= 1) {\n                util.setError(404, `can't add this record as it exists already`);\n                return util.send(res);\n            } else {\n                const added = await termService.addNew(newRecord);\n                if (Object.values(added).length >= 1) {\n                    util.setSuccess(\"Added successfully\", 200, added);\n                    return util.send(res);\n                } else {\n                    util.setError(400, \"Can't add new record\");\n                    return util.send(res);\n                }\n            }\n        } catch (error) {\n\n            util.setError(400, `Oops something went wrong >> ${error.message}`);\n            return util.send(res);\n        }\n    }\n}\nexport default termController;"],"file":"termController.js"}