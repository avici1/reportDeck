{"version":3,"sources":["../../../api/server/controllers/termController.js"],"names":["util","Util","termController","req","res","termService","getAll","all","Object","values","length","setError","send","setSuccess","message","getOneComplex","body","id","term","studentId","course","one","params","deleter","deleted","updated","updater","updated_class","newRecord","addNew","added"],"mappings":"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","sourcesContent":["import termService from '../services/termServices';\nimport Util from '../utils/Util';\n\nconst util = new Util();\nclass termController {\n\n\n    static async getAll(req, res) {\n        try {\n            const all = await termService.getAll();\n            if (Object.values(all).length < 1) {\n                util.setError(400, \"Records can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Records found successfully\", 200, all);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async getParticulars(req, res) {\n        try {\n            const one = await termService.getOneComplex(req.body.id,req.body.term,req.body.studentId,req.body.course);\n            if (!one) {\n                util.setError(400, \"Term can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Term found\", 200, one);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async deleteTerm(req, res) {\n        try {\n            const {id} = req.params;\n            const deleted = await termService.deleter(id);\n            if (!deleted) {\n                util.setError(400, \"Term can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Deleted successfully\", 200, deleted);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async updateTerm(req, res) {\n        const {\n            id\n        } = req.params;\n        const updated = req.body;\n\n        try {\n\n            if ((Object.values(updated).length >= 1) == false) {\n                util.setError(404, `sent empty fields`);\n                return util.send(res);\n            } else {\n                const updated_class = await termService.updater(id, updated);\n                if (!updated_class) {\n                    util.setError(404, `cant update a class`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess('records updated successfully', 200, updated_class);\n                    return util.send(res);\n                }\n\n            }\n\n        } catch (error) {\n            util.setError(404, 'Oops something Went wrong cant update the book >> ' + error.message);\n            return util.send(res);\n        }\n\n    }\n    static async addNewRecord(req, res) {\n        try {\n            const newRecord = req.body;\n          //  const lookUp = await termService.getOneComplex(req.query.classId, req.query.term, req.query.studentId, req.query.course);\n                const added = await termService.addNew(newRecord);\n                if (Object.values(added).length >= 1) {\n                    util.setSuccess(\"Added successfully\", 200, added);\n                    return util.send(res);\n                } else {\n                    util.setError(400, \"Can't add new record\");\n                    return util.send(res);\n                }\n            \n        } catch (error) {\n\n            util.setError(400, `Oops something went wrong >> ${error.message}`);\n            return util.send(res);\n        }\n    }\n}\nexport default termController;"],"file":"termController.js"}