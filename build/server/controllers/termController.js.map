{"version":3,"sources":["../../../api/server/controllers/termController.js"],"names":["util","Util","termController","req","res","termService","getAll","all","Object","values","length","setError","send","setSuccess","message","id","params","getOneComplex","one","getOnePerClass","classId","term","deleter","deleted","updated","body","updater","updated_class","markId_","studentId","course","newRecord","studentNames","maxTj","tj","maxExam","exam","markId","addNew","added"],"mappings":"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","sourcesContent":["import termService from '../services/termServices';\nimport Util from '../utils/Util';\n\nconst util = new Util();\nclass termController {\n\n\n    static async getAll(req, res) {\n        try {\n            const all = await termService.getAll();\n            if (Object.values(all).length < 1) {\n                util.setError(400, \"Records can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Records found successfully\", 200, all);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async getParticulars(req, res) {\n        const {\n            id\n        } = req.params;\n        try {\n            const one = await termService.getOneComplex(id);\n            if (!one) {\n                util.setError(400, \"Term can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Term found\", 200, one);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async getParticularsPerClass(req, res) {\n        try {\n            const one = await termService.getOnePerClass(req.params.classId,req.params.term);\n            if (!one) {\n                util.setError(400, \"Term can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Term found\", 200, one);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message + ' >>> ' + req.params.classId + ' >>> ' + req.params.term);\n            return util.send(res);\n        }\n    }\n    static async deleteTerm(req, res) {\n        try {\n            const {\n                id\n            } = req.params;\n            const deleted = await termService.deleter(id);\n            if (!deleted) {\n                util.setError(400, \"Term can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Deleted successfully\", 200, deleted);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async updateTerm(req, res) {\n        const {\n            id\n        } = req.params;\n        const updated = req.body;\n\n        try {\n\n            if ((Object.values(updated).length >= 1) == false) {\n                util.setError(404, `sent empty fields`);\n                return util.send(res);\n            } else {\n                const updated_class = await termService.updater(id, updated);\n                if (!updated_class) {\n                    util.setError(404, `cant update a class`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess('records updated successfully', 200, updated_class);\n                    return util.send(res);\n                }\n\n            }\n\n        } catch (error) {\n            util.setError(404, 'Oops something Went wrong cant update the book >> ' + error.message);\n            return util.send(res);\n        }\n\n    }\n    static async addNewRecord(req, res) {\n        try {\n            const markId_ = req.body.studentId+'-'+req.body.course+'-'+req.body.classId+'-'+req.body.term\n            const newRecord = {\n                studentId:req.body.studentId,\n                studentNames:req.body.studentNames,\n                maxTj: req.body.maxTj,\n                tj:req.body.tj,\n                maxExam: req.body.maxExam,\n                exam: req.body.exam,\n                classId:req.body.classId,\n                course:req.body.course,\n                term:req.body.term,\n                markId:markId_\n            }\n            //  const lookUp = await termService.getOneComplex(req.query.classId, req.query.term, req.query.studentId, req.query.course);\n            const added = await termService.addNew(newRecord);\n            if (Object.values(added).length >= 1) {\n                util.setSuccess(\"Added successfully\", 200, added);\n                return util.send(res);\n            } else {\n                util.setError(400, \"Can't add new record\");\n                return util.send(res);\n            }\n\n        } catch (error) {\n\n            util.setError(400, `Oops something went wrong >> ${error.message}`);\n            return util.send(res);\n        }\n    }\n}\nexport default termController;"],"file":"termController.js"}