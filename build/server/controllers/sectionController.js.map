{"version":3,"sources":["../../../api/server/controllers/sectionController.js"],"names":["util","Util","sectionsController","req","res","id","params","sectionService","getOne","one","Object","values","length","setSuccess","send","setError","getAll","list","message","get_defined_sections","sections","data","body","addNew","added","updater","updated","deleter","deleted"],"mappings":"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","sourcesContent":["import sectionService from '../services/sectionServices';\nimport Util from '../utils/Util';\n\nconst util = new Util();\n\nclass sectionsController {\n    static async getOne(req, res) {\n        try {\n            const id = req.params;\n            const one = await sectionService.getOne(id);\n            if (Object.values(one).length == 1) {\n                util.setSuccess(\"Found\", 200, one);\n                return util.send(res);\n            } else {\n                util.setError(400, \"A problem occured\");\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, \"A problem occured\");\n            return util.send(res);\n        }\n    }\n    static async getAll(req, res) {\n        try {\n            const list = await sectionService.getAll();\n            if (Object.values(list).length >= 1) {\n                util.setSuccess(\"Found \", 200, list);\n                return util.send(res);\n            } else {\n                util.setError(400, \"A problem occured can't find list of Sections\");\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, \"an error occured \" + error.message);\n            return util.send(res);\n        }\n    }\n    static async get_specific_sections(req,res){\n        try {\n            const sections = await sectionService.get_defined_sections();\n            if(Object.values(sections).length >=1){\n                util.setSuccess(\" Found sections\", 200,sections);\n                return util.send(res);\n            }else{\n                util.setError(\" Sections weren't found at all \");\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, `an error occured  ${error.message}`);\n            return util.send(res);\n        }\n    }\n    static async adder(req, res) {\n        try {\n            const data = req.body;\n            if ((Object.values(data).length < 3) == false) {\n                const added = await sectionService.addNew(data);\n                util.setSuccess(\"Added successfully\", 200, added);\n                return util.send(res);\n            } else {\n                util.setError(400, \"can't add some missing fields\");\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, \"an error occured \" + error.message);\n            return util.send(res);\n        }\n    }\n    static async udpdate(req, res) {\n        try {\n            const id = req.params;\n            const data = req.body;\n            if (Object.values(data).length >= 1) {\n                const updated = await sectionService.updater(id, data);\n                util.setSuccess(\"Updated successfully\", 200, updated);\n                return util.send(res);\n            } else {\n                util.setError(400, \"C'mon you got to atleast update one\");\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, \"An error occured \" + error.message);\n            return util.send(res);\n        }\n    }\n    static async delete(req, res) {\n        try {\n            const id = req.params;\n            const deleted = await sectionService.deleter(id);\n            if (deleted) {\n                util.setSuccess(\"Deleted successfully\", 200, deleted);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, \"An error occured \" + error.message);\n            return util.send(res);\n        }\n    }\n}\nexport default sectionsController;"],"file":"sectionController.js"}