{"version":3,"sources":["../../../api/server/controllers/studentController.js"],"names":["util","Util","studentController","req","res","studentService","getAllStudent","all","Object","values","length","setError","send","setSuccess","message","id","params","getOneStudent","one","deleteStudent","deleted","addee","body","date","Date","matricule_","matricule","slice","names","Math","floor","random","getFullYear","addStudent","added","updated","UpdateStudent","updated_class"],"mappings":"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","sourcesContent":["import studentService from '../services/studentServices';\nimport Util from '../utils/Util';\nconst util = new Util();\nclass studentController {\n\n\n    static async getAll(req, res) {\n        try {\n            const all = await studentService.getAllStudent();\n            if ((Object.values(all).length >=1) == false) {\n                util.setError(400, \"Students can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Students found successfully\", 200, all);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message + ' controller');\n            return util.send(res);\n        }\n    }\n    static async getParticular(req, res) {\n        try {\n            const id = req.params;\n            const one = await studentService.getOneStudent(id);\n            if ((Object.values(all).length >=1) == false) {\n                util.setError(400, \"Student can't be found\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Student found\", 200, one);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async deleter(req, res) {\n        try {\n            const id = req.params;\n            const deleted = await studentService.deleteStudent(id);\n            if ((Object.values(all).length >=1) == false) {\n                util.setError(400, \"Student can't be deleted\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Deleted successfully\", 200, deleted);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message );\n            return util.send(res);\n        }\n    }\n    static async adder(req, res) {\n        try {\n            const addee = req.body;\n            const date  = new Date();\n            const matricule_ = addee.matricule.slice(0,3)+'-'+addee.names.slice(0,2)+'-'+Math.floor(Math.random() * 100)+'-'+date.getFullYear();\n            addee.matricule = matricule_;\n            const added = await studentService.addStudent(addee);\n            if ((Object.values(added).length >=1) == false) {\n                util.setError(400, \"Student can't be added\");\n                return util.send(res);\n            } else {\n                util.setSuccess(\"Added successfully\", 200, added);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async updater(req, res) {\n        const { id } = req.params;\n        const updated = req.body;\n\n\n        try {\n\n            if ((Object.values(updated).length >= 1) == false) {\n                util.setError(404, `sent empty fields`);\n                return util.send(res);\n            } else {\n                const updated_class = await studentService.UpdateStudent(id, updated);\n                if (!updated_class) {\n                    util.setError(404, `cant update a Student`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess('Student updated successfully', 200, updated_class);\n                    return util.send(res);\n                }\n\n            }\n\n        } catch (error) {\n            util.setError(404, 'Oops something Went wrong cant update the student>> ' + error.message);\n            return util.send(res);\n        }\n\n    }\n}\nexport default studentController;"],"file":"studentController.js"}