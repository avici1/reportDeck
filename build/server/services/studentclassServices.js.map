{"version":3,"sources":["../../../api/server/services/studentclassServices.js"],"names":["op","sequelize","Op","studentsClasservices","newEntry","database","studentsClass","create","added","id","destroy","where","studentId","deleted","updated_","update","updated","findAll","attributes","exclude","or","like","searchParam","classId","foundTerm"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAMA,EAAE,GAAGC,sBAAUC,EAArB;;IACMC,oB;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,aAAT,CAAuBC,MAAvB,CAA8BH,QAA9B,C;;;AAAdI,gBAAAA,K;;qBACHA,K;;;;;iDACQA,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMC,E;;;;;;;;uBAESJ,mBAASC,aAAT,CAAuBI,OAAvB,CAA+B;AAACC,kBAAAA,KAAK,EAAC;AAACC,oBAAAA,SAAS,EAACH;AAAX;AAAP,iBAA/B,C;;;AAAhBI,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMJ,E,EAAGK,Q;;;;;;;;uBAEMT,mBAASC,aAAT,CAAuBS,MAAvB,CAA8BD,QAA9B,EAAuC;AAACH,kBAAAA,KAAK,EAAC;AAACC,oBAAAA,SAAS,EAACH;AAAX;AAAP,iBAAvC,C;;;AAAhBO,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOMX,mBAASC,aAAT,CAAuBW,OAAvB,CAA+B;AACxCC,kBAAAA,UAAU,EAAE;AAACC,oBAAAA,OAAO,EAAE,CAAC,IAAD,EAAM,WAAN,EAAkB,WAAlB;AAAV;AAD4B,iBAA/B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAQDV,E;;;;;;;;uBAEYJ,mBAASC,aAAT,CAAuBW,OAAvB,CAA+B;AACnDC,kBAAAA,UAAU,EAAE;AAACC,oBAAAA,OAAO,EAAE,CAAC,IAAD,EAAM,WAAN,EAAkB,WAAlB;AAAV,mBADuC;AAEnDR,kBAAAA,KAAK,uCACAX,EAAE,CAACoB,EADH,EACO,CACJ;AAACR,oBAAAA,SAAS,uCAAGZ,EAAE,CAACqB,IAAN,EAAa,MAAMC,WAAN,GAAmB,GAAhC;AAAV,mBADI,EAEJ;AAACC,oBAAAA,OAAO,uCAAIvB,EAAE,CAACqB,IAAP,EAAe,MAAMC,WAAN,GAAoB,GAAnC;AAAR,mBAFI,CADP;AAF8C,iBAA/B,C;;;AAAlBE,gBAAAA,S;;qBASHA,S;;;;;kDACQA,S;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAMJrB,oB","sourcesContent":["import database from '../../models';\nimport sequelize from 'sequelize';\nconst op = sequelize.Op;\nclass studentsClasservices{\n    static async addNew(newEntry){\n        try {\n            const added = await database.studentsClass.create(newEntry);\n            if(added){\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id){\n        try {\n            const deleted = await database.studentsClass.destroy({where:{studentId:id}});\n            if(deleted){\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id,updated_){\n        try {\n            const updated = await database.studentsClass.update(updated_,{where:{studentId:id}});\n            if(updated){\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll(){\n        try {\n            return await database.studentsClass.findAll({\n                attributes :{exclude :['id','createdAt','updatedAt']},\n            });\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOne(id){\n        try {\n            const foundTerm = await database.studentsClass.findAll({\n                attributes :{exclude :['id','createdAt','updatedAt']},\n                where : {\n                    [op.or]:[\n                        {studentId:{[op.like]: '%' + searchParam +'%'}},\n                        {classId: {[op.like] : '%' + searchParam + '%'}}\n                    ]\n                }\n            })\n            if(foundTerm){\n                return foundTerm;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default studentsClasservices;"],"file":"studentclassServices.js"}