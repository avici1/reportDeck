{"version":3,"sources":["../../../api/server/services/schoolparameterServices.js"],"names":["schoolParameterServices","newEntry","database","SchoolParameters","create","added","id","destroy","where","deleted","updated_","update","updated","findAll","findOne","foundTerm"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,uB;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,gBAAT,CAA0BC,MAA1B,CAAiCH,QAAjC,C;;;AAAdI,gBAAAA,K;;qBACHA,K;;;;;iDACQA,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMC,E;;;;;;;;uBAESJ,mBAASC,gBAAT,CAA0BI,OAA1B,CAAkC;AAACC,kBAAAA,KAAK,EAAC;AAACF,oBAAAA,EAAE,EAACA;AAAJ;AAAP,iBAAlC,C;;;AAAhBG,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMH,E,EAAGI,Q;;;;;;;;uBAEMR,mBAASC,gBAAT,CAA0BQ,MAA1B,CAAiCD,QAAjC,EAA0C;AAACF,kBAAAA,KAAK,EAAC;AAACF,oBAAAA,EAAE,EAACA;AAAJ;AAAP,iBAA1C,C;;;AAAhBM,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOMV,mBAASC,gBAAT,CAA0BU,OAA1B,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMDP,E;;;;;;;;uBAEYJ,mBAASC,gBAAT,CAA0BW,OAA1B,CAAkC;AAACN,kBAAAA,KAAK,EAAC;AAACF,oBAAAA,EAAE,EAACA;AAAJ;AAAP,iBAAlC,C;;;AAAlBS,gBAAAA,S;;qBACHA,S;;;;;kDACQA,S;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAMJf,uB","sourcesContent":["import database from '../../models';\n\nclass schoolParameterServices{\n    static async addNew(newEntry){\n        try {\n            const added = await database.SchoolParameters.create(newEntry);\n            if(added){\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id){\n        try {\n            const deleted = await database.SchoolParameters.destroy({where:{id:id}});\n            if(deleted){\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id,updated_){\n        try {\n            const updated = await database.SchoolParameters.update(updated_,{where:{id:id}});\n            if(updated){\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll(){\n        try {\n            return await database.SchoolParameters.findAll();\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOne(id){\n        try {\n            const foundTerm = await database.SchoolParameters.findOne({where:{id:id}});\n            if(foundTerm){\n                return foundTerm;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default schoolParameterServices;"],"file":"schoolparameterServices.js"}