{"version":3,"sources":["../../../api/server/services/sectionServices.js"],"names":["sectionsService","newEntry","database","sections","create","added","Object","values","length","id","destroy","where","schoolId","deleted","updated_","update","sectionId","updated","findAll","findOne","foundTerm"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,e;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,QAAT,CAAkBC,MAAlB,CAAyBH,QAAzB,C;;;AAAdI,gBAAAA,K;;sBACHC,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,IAA6B,C;;;;;iDACrBH,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMI,E;;;;;;;;uBAESP,mBAASC,QAAT,CAAkBO,OAAlB,CAA0B;AAACC,kBAAAA,KAAK,EAAC;AAACC,oBAAAA,QAAQ,EAACH;AAAV;AAAP,iBAA1B,C;;;AAAhBI,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMJ,E,EAAGK,Q;;;;;;;;uBAEMZ,mBAASC,QAAT,CAAkBY,MAAlB,CAAyBD,QAAzB,EAAkC;AAACH,kBAAAA,KAAK,EAAC;AAACK,oBAAAA,SAAS,EAACP;AAAX;AAAP,iBAAlC,C;;;AAAhBQ,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOMf,mBAASC,QAAT,CAAkBe,OAAlB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMDT,E;;;;;;;;uBAEYP,mBAASC,QAAT,CAAkBgB,OAAlB,CAA0B;AAACR,kBAAAA,KAAK,EAAC;AAACC,oBAAAA,QAAQ,EAACH;AAAV;AAAP,iBAA1B,C;;;AAAlBW,gBAAAA,S;;sBACHd,MAAM,CAACC,MAAP,CAAca,SAAd,EAAyBZ,MAAzB,IAAkC,C;;;;;kDAC1BY,S;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAMJpB,e","sourcesContent":["import database from '../../models';\n\nclass sectionsService{\n    static async addNew(newEntry){\n        try {\n            const added = await database.sections.create(newEntry);\n            if(Object.values(added).length>=1){\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id){\n        try {\n            const deleted = await database.sections.destroy({where:{schoolId:id}});\n            if(deleted){\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id,updated_){\n        try {\n            const updated = await database.sections.update(updated_,{where:{sectionId:id}});\n            if(updated){\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll(){\n        try {\n            return await database.sections.findAll();\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOne(id){\n        try {\n            const foundTerm = await database.sections.findOne({where:{schoolId:id}});\n            if(Object.values(foundTerm).length >=1){\n                return foundTerm;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default sectionsService;"],"file":"sectionServices.js"}