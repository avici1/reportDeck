{"version":3,"sources":["../../../api/server/services/decisionServices.js"],"names":["decisionService","newEntry","database","decision","create","added","Object","values","length","id","destroy","where","decisionId","deleted","updated_","update","updated","findAll","attributes","findOne","classId","foundTerm"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,e;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,QAAT,CAAkBC,MAAlB,CAAyBH,QAAzB,C;;;AAAdI,gBAAAA,K;;sBACFC,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,IAA+B,C;;;;;iDACxBH,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMI,E;;;;;;;;uBAESP,mBAASC,QAAT,CAAkBO,OAAlB,CAA0B;AAC5CC,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,UAAU,EAAEH;AADT;AADqC,iBAA1B,C;;;AAAhBI,gBAAAA,O;;qBAKFA,O;;;;;kDACOA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMJ,E,EAAIK,Q;;;;;;;;uBAEKZ,mBAASC,QAAT,CAAkBY,MAAlB,CAAyBD,QAAzB,EAAmC;AACrDH,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,UAAU,EAAEH;AADT;AAD8C,iBAAnC,C;;;AAAhBO,gBAAAA,O;;qBAKFA,O;;;;;kDACOA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOgBd,mBAASC,QAAT,CAAkBc,OAAlB,CAA0B;AAC7CC,kBAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,YAAT,EAAuB,WAAvB,EAAoC,cAApC,EAAoD,UAApD,EAA+D,SAA/D;AADiC,iBAA1B,C;;;AAAjBf,gBAAAA,Q;;qBAGFA,Q;;;;;kDACOA,Q;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOMD,mBAASC,QAAT,CAAkBc,OAAlB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMDR,E;;;;;;;;uBAIYP,mBAASC,QAAT,CAAkBgB,OAAlB,CAA0B;AAC9CD,kBAAAA,UAAU,EAAE,CAAE,MAAF,EAAS,WAAT,EAAqB,cAArB,EAAoC,UAApC,EAA+C,YAA/C,CADkC;AAE9CP,kBAAAA,KAAK,EAAE;AACHS,oBAAAA,OAAO,EAAEX;AADN;AAFuC,iBAA1B,C;;;AAAlBY,gBAAAA,S;;qBAMFA,S;;;;;kDACOA,S;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAMJrB,e","sourcesContent":["import database from '../../models';\n\nclass decisionService {\n    static async addNew(newEntry) {\n        try {\n            const added = await database.decision.create(newEntry);\n            if (Object.values(added).length >= 1) {\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id) {\n        try {\n            const deleted = await database.decision.destroy({\n                where: {\n                    decisionId: id\n                }\n            });\n            if (deleted) {\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id, updated_) {\n        try {\n            const updated = await database.decision.update(updated_, {\n                where: {\n                    decisionId: id\n                }\n            });\n            if (updated) {\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async get_defined_decision() {\n        try {\n            const decision = await database.decision.findAll({\n                attributes: ['year', 'decisionId', 'studentId', 'studentNames', 'decision','classId']\n            });\n            if (decision) {\n                return decision;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll() {\n        try {\n            return await database.decision.findAll();\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOne(id) {\n\n        try {\n            \n            const foundTerm = await database.decision.findOne({\n                attributes :[ 'year','studentId','studentNames','decision','decisionId'],\n                where: {\n                    classId: id\n                }\n            });\n            if (foundTerm) {\n                return foundTerm;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default decisionService;"],"file":"decisionServices.js"}