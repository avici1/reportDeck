{"version":3,"sources":["../../../api/server/services/studentServices.js"],"names":["op","sequelize","Op","studentServices","database","Students","findAll","searchParam","where","or","matricule","like","names","foundStudent","id","Updated","update","updateStudent","destroy","deletedStudent","newStudent","create","added"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;AACA,IAAMA,EAAE,GAAGC,sBAAUC,EAArB;;IACMC,e;;;;;;;;;;;;;;;;;;;uBAGmBC,mBAASC,QAAT,CAAkBC,OAAlB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMMC,W;;;;;;;;uBAEQH,mBAASC,QAAT,CAAkBC,OAAlB,CAA0B;AACjDE,kBAAAA,KAAK,uCACAR,EAAE,CAACS,EADH,EACQ,CACL;AAAEC,oBAAAA,SAAS,uCAAKV,EAAE,CAACW,IAAR,EAAe,MAAMJ,WAAN,GAAoB,GAAnC;AAAX,mBADK,EAEL;AAAEK,oBAAAA,KAAK,uCAAKZ,EAAE,CAACW,IAAR,EAAe,MAAMJ,WAAN,GAAoB,GAAnC;AAAP,mBAFK,CADR;AAD4C,iBAA1B,C;;;AAArBM,gBAAAA,Y;;qBAQFA,Y;;;;;kDACOA,Y;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKYC,E,EAAIC,O;;;;;;;;uBAEKX,mBAASC,QAAT,CAAkBW,MAAlB,CAAyBD,OAAzB,EAAkC;AAAEP,kBAAAA,KAAK,EAAE;AAAEE,oBAAAA,SAAS,EAAEI;AAAb;AAAT,iBAAlC,C;;;AAAtBG,gBAAAA,a;;qBACFA,a;;;;;kDACOA,a;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKYH,E;;;;;;;;uBAEUV,mBAASC,QAAT,CAAkBa,OAAlB,CAA0B;AAAEV,kBAAAA,KAAK,EAAE;AAAEE,oBAAAA,SAAS,EAAEI;AAAb;AAAT,iBAA1B,C;;;AAAvBK,gBAAAA,c;;qBACFA,c;;;;;kDACOA,c;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKSC,U;;;;;;;;uBAEIhB,mBAASC,QAAT,CAAkBgB,MAAlB,CAAyBD,UAAzB,C;;;AAAdE,gBAAAA,K;;qBACFA,K;;;;;kDACOA,K;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAMJnB,e","sourcesContent":["import database from '../../models';\nimport sequelize from 'sequelize';\n// import Util from 'Util';\nconst op = sequelize.Op;\nclass studentServices {\n    static async getAllStudent() {\n        try {\n            return await database.Students.findAll();\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOneStudent(searchParam) {\n        try {\n            const foundStudent = await database.Students.findAll({\n                where: {\n                    [op.or]: [\n                        { matricule: { [op.like]: '%' + searchParam + '%' } },\n                        { names: { [op.like]: '%' + searchParam + '%' } }\n                    ]\n                }\n            });\n            if (foundStudent) {\n                return foundStudent;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async UpdateStudent(id, Updated) {\n        try {\n            const updateStudent = await database.Students.update(Updated, { where: { matricule: id } })\n            if (updateStudent) {\n                return updateStudent;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleteStudent(id) {\n        try {\n            const deletedStudent = await database.Students.destroy({ where: { matricule: id } });\n            if (deletedStudent) {\n                return deletedStudent;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async addStudent(newStudent) {\n        try {\n            const added = await database.Students.create(newStudent);\n            if (added) {\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default studentServices;"],"file":"studentServices.js"}