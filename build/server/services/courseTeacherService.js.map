{"version":3,"sources":["../../../api/server/services/courseTeacherService.js"],"names":["courseTeacherService","newEntry","database","courseTeacher","create","added","Object","values","length","id","destroy","where","classId","deleted","updated_","update","updated","findAll","attributes","exclude","raw","foundTerm"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,oB;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,aAAT,CAAuBC,MAAvB,CAA8BH,QAA9B,C;;;AAAdI,gBAAAA,K;;sBACFC,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,IAA+B,C;;;;;iDACxBH,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMI,E;;;;;;;;uBAESP,mBAASC,aAAT,CAAuBO,OAAvB,CAA+B;AACjDC,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AAD0C,iBAA/B,C;;;AAAhBI,gBAAAA,O;;qBAKFA,O;;;;;kDACOA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMJ,E,EAAIK,Q;;;;;;;;uBAEKZ,mBAASC,aAAT,CAAuBY,MAAvB,CAA8BD,QAA9B,EAAwC;AAC1DH,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AADmD,iBAAxC,C;;;AAAhBO,gBAAAA,O;;qBAKFA,O;;;;;kDACOA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOWd,mBAASC,aAAT,CAAuBc,OAAvB,CAA+B;AAC7CC,kBAAAA,UAAU,EAAG;AAAEC,oBAAAA,OAAO,EAAG,CAAC,IAAD,EAAM,WAAN,EAAkB,WAAlB,EAA8B,SAA9B;AAAZ;AADgC,iBAA/B,C;;;AAAZC,gBAAAA,G;kDAGCA,G;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMMX,E;;;;;;;;uBAEWP,mBAASC,aAAT,CAAuBc,OAAvB,CAA+B;AACnDN,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AAD4C,iBAA/B,C;;;AAAlBY,gBAAAA,S;;sBAKFf,MAAM,CAACC,MAAP,CAAcc,SAAd,EAAyBb,MAAzB,IAAmC,C;;;;;kDAC5Ba,S;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAMJrB,oB","sourcesContent":["import database from '../../models';\n\nclass courseTeacherService {\n    static async addNew(newEntry) {\n        try {\n            const added = await database.courseTeacher.create(newEntry);\n            if (Object.values(added).length >= 1) {\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id) {\n        try {\n            const deleted = await database.courseTeacher.destroy({\n                where: {\n                    classId: id\n                }\n            });\n            if (deleted) {\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id, updated_) {\n        try {\n            const updated = await database.courseTeacher.update(updated_, {\n                where: {\n                    classId: id\n                }\n            });\n            if (updated) {\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll() {\n        try {\n            const raw = await database.courseTeacher.findAll({\n                attributes : { exclude : ['id','createdAt','updatedAt','classId']}\n            });\n            return raw;\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOne_(id) {\n        try {\n            const foundTerm = await database.courseTeacher.findAll({\n                where: {\n                    classId: id\n                }\n            });\n            if (Object.values(foundTerm).length >= 1) {\n                return foundTerm;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default courseTeacherService;"],"file":"courseTeacherService.js"}