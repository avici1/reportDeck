{"version":3,"sources":["../../../api/server/services/classServices.js"],"names":["op","sequelize","Op","classService","database","Classes","findAll","attributes","exclude","id","findOne","where","classId","ClassToFind","newClass","create","classToUpdate","Object","values","length","update","classToDelete","destroy"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAMA,EAAE,GAAGC,sBAAUC,EAArB;;IACMC,Y;;;;;;;;;;;;;;;;;;;uBAGmBC,mBAASC,OAAT,CAAiBC,OAAjB,CAAyB;AAClCC,kBAAAA,UAAU,EAAG;AAACC,oBAAAA,OAAO,EAAG,CAAC,IAAD,EAAM,WAAN,EAAkB,WAAlB;AAAX;AADqB,iBAAzB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAOIC,E;;;;;;;;uBAESL,mBAASC,OAAT,CAAiBK,OAAjB,CAAyB;AAC/CH,kBAAAA,UAAU,EAAE;AAACC,oBAAAA,OAAO,EAAE,CAAC,IAAD,EAAM,WAAN,EAAkB,WAAlB;AAAV,mBADmC;AAE/CG,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AAFwC,iBAAzB,C;;;AAApBI,gBAAAA,W;;qBAMFA,W;;;;;kDACOA,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKOC,Q;;;;;;;uBAEDV,mBAASC,OAAT,CAAiBU,MAAjB,CAAwBD,QAAxB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKIL,E,EAAIK,Q;;;;;;;;uBAEOV,mBAASC,OAAT,CAAiBK,OAAjB,CAAyB;AACjDC,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AAD0C,iBAAzB,C;;;AAAtBO,gBAAAA,a;;sBAKFC,MAAM,CAACC,MAAP,CAAcF,aAAd,EAA6BG,MAA7B,IAAuC,C;;;;;;uBACjCf,mBAASC,OAAT,CAAiBe,MAAjB,CAAwBN,QAAxB,EAAkC;AACpCH,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AAD6B,iBAAlC,C;;;kDAKCK,Q;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKUL,E;;;;;;;;uBAEWL,mBAASC,OAAT,CAAiBK,OAAjB,CAAyB;AACjDC,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AAD0C,iBAAzB,C;;;AAAtBY,gBAAAA,a;;qBAKFA,a;;;;;;uBACMjB,mBAASC,OAAT,CAAiBiB,OAAjB,CAAyB;AAC3BX,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEH;AADN;AADoB,iBAAzB,C;;;kDAKCY,a;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOJlB,Y","sourcesContent":["import database from '../../models';\nimport sequelize from 'sequelize';\nconst op = sequelize.Op;\nclass classService {\n    static async getAllClasses() {\n        try {\n            return await database.Classes.findAll({\n                attributes : {exclude : ['id','createdAt','updatedAt']}\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOneClass(id) {\n        try {\n            const ClassToFind = await database.Classes.findOne({\n                attributes :{exclude :['id','createdAt','updatedAt']},\n                where: {\n                    classId: id\n                }\n            });\n            if (ClassToFind) {\n                return ClassToFind;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async AddClass(newClass) {\n        try {\n            return await database.Classes.create(newClass);\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updateClass(id, newClass) {\n        try {\n            const classToUpdate = await database.Classes.findOne({\n                where: {\n                    classId: id\n                }\n            });\n            if (Object.values(classToUpdate).length >= 1) {\n                await database.Classes.update(newClass, {\n                    where: {\n                        classId: id\n                    }\n                });\n                return newClass;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleteClass(id) {\n        try {\n            const classToDelete = await database.Classes.findOne({\n                where: {\n                    classId: id\n                }\n            });\n            if (classToDelete) {\n                await database.Classes.destroy({\n                    where: {\n                        classId: id\n                    }\n                });\n                return classToDelete;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport default classService;"],"file":"classServices.js"}