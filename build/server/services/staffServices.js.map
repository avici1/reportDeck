{"version":3,"sources":["../../../api/server/services/staffServices.js"],"names":["op","sequelize","Op","staffService","database","Staff","findAll","attributes","searchParam","exclude","where","or","staffId","like","staffNames","staffTitle","staff","teacher","newStaff","create","id","findOne","StaffToUpdate","update","staffToDelete","destroy"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAMA,EAAE,GAAGC,sBAAUC,EAArB;;IACMC,Y;;;;;;;;;;;;;;;;;;;uBAGmBC,mBAASC,KAAT,CAAeC,OAAf,CAAuB;AAChCC,kBAAAA,UAAU,EAAG,CAAC,SAAD,EAAW,YAAX;AADmB,iBAAvB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAQIC,W;;;;;;;;uBAEGJ,mBAASC,KAAT,CAAeC,OAAf,CAAuB;AACvCC,kBAAAA,UAAU,EAAE;AAACE,oBAAAA,OAAO,EAAE,CAAC,IAAD,EAAM,WAAN,EAAkB,WAAlB;AAAV,mBAD2B;AAEvCC,kBAAAA,KAAK,uCACAV,EAAE,CAACW,EADH,EACQ,CACL;AAAEC,oBAAAA,OAAO,uCAAKZ,EAAE,CAACa,IAAR,EAAe,MAAML,WAAN,GAAoB,GAAnC;AAAT,mBADK,EAEL;AAAEM,oBAAAA,UAAU,uCAAKd,EAAE,CAACa,IAAR,EAAe,MAAML,WAAN,GAAoB,GAAnC;AAAZ,mBAFK,EAGL;AAAEO,oBAAAA,UAAU,uCAAKf,EAAE,CAACa,IAAR,EAAe,MAAML,WAAN,GAAoB,GAAnC;AAAZ,mBAHK,CADR;AAFkC,iBAAvB,C;;;AAAdQ,gBAAAA,K;;qBAWFA,K;;;;;kDACOA,K;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOWZ,mBAASC,KAAT,CAAeC,OAAf,CAAuB;AACxCC,kBAAAA,UAAU,EAAG,CAAC,SAAD,EAAW,YAAX,CAD2B;AAExCG,kBAAAA,KAAK,EAAE;AACHK,oBAAAA,UAAU,EAAE;AADT;AAFiC,iBAAvB,C;;;AAAfE,gBAAAA,O;;qBAMHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKUC,Q;;;;;;;uBAEDd,mBAASC,KAAT,CAAec,MAAf,CAAsBD,QAAtB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKIE,E,EAAIF,Q;;;;;;;;uBAEOd,mBAASC,KAAT,CAAegB,OAAf,CAAuB;AAAEX,kBAAAA,KAAK,EAAE;AAAEE,oBAAAA,OAAO,EAAEQ;AAAX;AAAT,iBAAvB,C;;;AAAtBE,gBAAAA,a;;qBACFA,a;;;;;;uBACMlB,mBAASC,KAAT,CAAekB,MAAf,CAAsBL,QAAtB,EAAgC;AAAER,kBAAAA,KAAK,EAAE;AAAEE,oBAAAA,OAAO,EAAEQ;AAAX;AAAT,iBAAhC,C;;;kDACCF,Q;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKUE,E;;;;;;;;uBAEWhB,mBAASC,KAAT,CAAegB,OAAf,CAAuB;AAAEX,kBAAAA,KAAK,EAAE;AAAEE,oBAAAA,OAAO,EAAEQ;AAAX;AAAT,iBAAvB,C;;;AAAtBI,gBAAAA,a;;qBACFA,a;;;;;;uBACapB,mBAASC,KAAT,CAAeoB,OAAf,CAAuB;AAAEf,kBAAAA,KAAK,EAAE;AAAEE,oBAAAA,OAAO,EAACQ;AAAV;AAAT,iBAAvB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAOdjB,Y","sourcesContent":["import database from '../../models';\nimport sequelize from 'sequelize';\nconst op = sequelize.Op;\nclass staffService {\n    static async GetAllStaff() {\n        try {\n            return await database.Staff.findAll({\n                attributes : ['staffId','staffNames']\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async SearchStaff(searchParam) {\n        try {\n            const staff = await database.Staff.findAll({\n                attributes :{exclude :['id','createdAt','updatedAt']},\n                where: {\n                    [op.or]: [\n                        { staffId: { [op.like]: '%' + searchParam + '%' } },\n                        { staffNames: { [op.like]: '%' + searchParam + '%' } },\n                        { staffTitle: { [op.like]: '%' + searchParam + '%' } },\n                        \n                    ]\n                }\n            });\n            if (staff) {\n                return staff;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async searchTeacher() {\n     try {\n         const teacher =await database.Staff.findAll({\n             attributes : ['staffId','staffNames'],\n             where: {\n                 staffTitle: 'Teacher'\n             }\n         });\n         if(teacher){\n             return teacher;\n         }\n         return null;\n     } catch (error) {\n         throw error;\n     }\n    }\n    static async AddStaff(newStaff) {\n        try {\n            return await database.Staff.create(newStaff);\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async UpdateStaff(id, newStaff) {\n        try {\n            const StaffToUpdate = await database.Staff.findOne({ where: { staffId: id } });\n            if (StaffToUpdate) {\n                await database.Staff.update(newStaff, { where: { staffId: id } });\n                return newStaff;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async DeleteStaff(id) {\n        try {\n            const staffToDelete = await database.Staff.findOne({ where: { staffId: id } });\n            if (staffToDelete) {\n                return await database.Staff.destroy({ where: { staffId:id } });\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default staffService;"],"file":"staffServices.js"}