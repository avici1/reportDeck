{"version":3,"sources":["../../../api/server/services/termServices.js"],"names":["op","sequelize","Op","termServices","newEntry","database","Term","create","added","Object","values","length","id","destroy","where","markId","deleted","updated_","update","updated","findAll","attributes","exclude","foundTerm","term","or","classId"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAMA,EAAE,GAAGC,sBAAUC,EAArB;;IACMC,Y;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,IAAT,CAAcC,MAAd,CAAqBH,QAArB,C;;;AAAdI,gBAAAA,K;;sBACFC,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,GAA8B,C;;;;;iDACvBH,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMI,E;;;;;;;;uBAESP,mBAASC,IAAT,CAAcO,OAAd,CAAsB;AACxCC,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,MAAM,EAAEH;AADL;AADiC,iBAAtB,C;;;AAAhBI,gBAAAA,O;;qBAKFA,O;;;;;kDACOA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMJ,E,EAAIK,Q;;;;;;;;uBAEKZ,mBAASC,IAAT,CAAcY,MAAd,CAAqBD,QAArB,EAA+B;AACjDH,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,MAAM,EAAEH;AADL;AAD0C,iBAA/B,C;;;AAAhBO,gBAAAA,O;;qBAKFA,O;;;;;kDACOA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOMd,mBAASC,IAAT,CAAcc,OAAd,CAAsB;AAC/BC,kBAAAA,UAAU,EAAE;AACRC,oBAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,WAAzB;AADD;AADmB,iBAAtB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAWMV,E;;;;;;;;uBAEKP,mBAASC,IAAT,CAAcc,OAAd,CAAsB;AAC1CC,kBAAAA,UAAU,EAAE;AACRC,oBAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,WAAzB;AADD,mBAD8B;AAI1CR,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,MAAM,EAAEH;AADL;AAJmC,iBAAtB,C;;;AAAlBW,gBAAAA,S;;sBAQFd,MAAM,CAACC,MAAP,CAAca,SAAd,EAAyBZ,MAAzB,IAAmC,C;;;;;kDAC5BY,S;;;kDAEA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMSX,E,EAAGY,I;;;;;;;;uBAECnB,mBAASC,IAAT,CAAcc,OAAd,CAAsB;AAC1CC,kBAAAA,UAAU,EAAE;AACRC,oBAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,WAAzB;AADD,mBAD8B;AAK1CR,kBAAAA,KAAK,uCACDd,EAAE,CAACyB,EADF,EACO,CACL;AAACC,oBAAAA,OAAO,EAACd;AAAT,mBADK,EAEL;AAACY,oBAAAA,IAAI,EAACA;AAAN,mBAFK,CADP;AALqC,iBAAtB,C;;;AAAlBD,gBAAAA,S;;sBAYFd,MAAM,CAACC,MAAP,CAAca,SAAd,EAAyBZ,MAAzB,IAAmC,C;;;;;kDAC5BY,S;;;kDAEA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAORpB,Y","sourcesContent":["import database from '../../models';\nimport sequelize from 'sequelize';\nconst op = sequelize.Op;\nclass termServices {\n    static async addNew(newEntry) {\n        try {\n            const added = await database.Term.create(newEntry);\n            if (Object.values(added).length > 1) {\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id) {\n        try {\n            const deleted = await database.Term.destroy({\n                where: {\n                    markId: id\n                }\n            });\n            if (deleted) {\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id, updated_) {\n        try {\n            const updated = await database.Term.update(updated_, {\n                where: {\n                    markId: id\n                }\n            });\n            if (updated) {\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll() {\n        try {\n            return await database.Term.findAll({\n                attributes: {\n                    exclude: ['classId', 'createdAt', 'updatedAt']\n                }\n            });\n\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async getOneComplex(id) {\n        try {\n            const foundTerm = await database.Term.findAll({\n                attributes: {\n                    exclude: ['classId', 'createdAt', 'updatedAt']\n                },\n                where: {\n                    markId: id\n                }\n            });\n            if (Object.values(foundTerm).length >= 1) {\n                return foundTerm;\n            } else {\n                return null;\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOnePerClass(id,term) {\n        try {\n            const foundTerm = await database.Term.findAll({\n                attributes: {\n                    exclude: ['classId', 'createdAt', 'updatedAt']\n                },\n                \n                where: {\n                   [op.or] :[\n                       {classId:id},\n                       {term:term}\n                   ]\n                }\n            });\n            if (Object.values(foundTerm).length >= 1) {\n                return foundTerm;\n            } else {\n                return null;\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default termServices;"],"file":"termServices.js"}