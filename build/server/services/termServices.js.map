{"version":3,"sources":["../../../api/server/services/termServices.js"],"names":["op","sequelize","termServices","newEntry","database","Term","create","added","Object","values","length","id","destroy","where","deleted","updated_","update","updated","findAll","attributes","exclude","classId_n","term_n","studentId_n","course_n","and","classId","studentId","term","course","foundTerm"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAOA,EAAE,GAAGC,qBAAZ;;IACMC,Y;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,IAAT,CAAcC,MAAd,CAAqBH,QAArB,C;;;AAAdI,gBAAAA,K;;sBACHC,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,GAA8B,C;;;;;iDACtBH,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMI,E;;;;;;;;uBAESP,mBAASC,IAAT,CAAcO,OAAd,CAAsB;AAACC,kBAAAA,KAAK,EAAC;AAACF,oBAAAA,EAAE,EAACA;AAAJ;AAAP,iBAAtB,C;;;AAAhBG,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMH,E,EAAGI,Q;;;;;;;;uBAEMX,mBAASC,IAAT,CAAcW,MAAd,CAAqBD,QAArB,EAA8B;AAACF,kBAAAA,KAAK,EAAC;AAACF,oBAAAA,EAAE,EAACA;AAAJ;AAAP,iBAA9B,C;;;AAAhBM,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOMb,mBAASC,IAAT,CAAca,OAAd,CAAsB;AAC/BC,kBAAAA,UAAU,EAAG;AACTC,oBAAAA,OAAO,EAAG,CAAC,SAAD,EAAW,WAAX,EAAuB,WAAvB;AADD;AADkB,iBAAtB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAWMC,S,EAAUC,M,EAAOC,W,EAAYC,Q;;;;;;;;uBAExBpB,mBAASC,IAAT,CAAca,OAAd,CAAsB;AAC1CL,kBAAAA,KAAK,uCACAb,EAAE,CAACyB,GADH,EACU,CACP;AAACC,oBAAAA,OAAO,EAACL;AAAT,mBADO,EAEP;AAACM,oBAAAA,SAAS,EAACJ;AAAX,mBAFO,EAGP;AAACK,oBAAAA,IAAI,EAACN;AAAN,mBAHO,EAIP;AAACO,oBAAAA,MAAM,EAACL;AAAR,mBAJO,CADV;AADqC,iBAAtB,C;;;AAAlBM,gBAAAA,S;;sBAUHtB,MAAM,CAACC,MAAP,CAAcqB,SAAd,EAAyBpB,MAAzB,IAAkC,C;;;;;kDAC1BoB,S;;;kDAEA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAOR5B,Y","sourcesContent":["import database from '../../models';\nimport sequelize from 'sequelize';\nconst  op = sequelize;\nclass termServices{\n    static async addNew(newEntry){\n        try {\n            const added = await database.Term.create(newEntry);\n            if(Object.values(added).length > 1){\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id){\n        try {\n            const deleted = await database.Term.destroy({where:{id:id}});\n            if(deleted){\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id,updated_){\n        try {\n            const updated = await database.Term.update(updated_,{where:{id:id}});\n            if(updated){\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll(){\n        try {\n            return await database.Term.findAll({\n                attributes : {\n                    exclude : ['classId','createdAt','updatedAt']\n                }\n            });\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    \n    static async getOneComplex(classId_n,term_n,studentId_n,course_n){\n        try {\n            const foundTerm = await database.Term.findAll({\n                where :{\n                    [op.and] : [\n                        {classId:classId_n},\n                        {studentId:studentId_n},\n                        {term:term_n},\n                        {course:course_n}\n                    ]\n                }\n            });\n            if(Object.values(foundTerm).length >=1){\n                return foundTerm;\n            }else{\n                return null;\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default termServices;"],"file":"termServices.js"}