{"version":3,"sources":["../../../api/server/services/termServices.js"],"names":["op","sequelize","termServices","newEntry","database","Term","create","added","Object","values","length","id","destroy","where","studentId","deleted","updated_","update","updated","findAll","searchParam","or","like","maxTj","tj","maxExam","exam","foundTerm","classId_n","term_n","studentId_n","course_n","and","classId","term","course"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAOA,EAAE,GAAGC,qBAAZ;;IACMC,Y;;;;;;;;;;;;oDACkBC,Q;;;;;;;;uBAEQC,mBAASC,IAAT,CAAcC,MAAd,CAAqBH,QAArB,C;;;AAAdI,gBAAAA,K;;sBACHC,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,GAA8B,C;;;;;iDACtBH,K;;;iDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMI,E;;;;;;;;uBAESP,mBAASC,IAAT,CAAcO,OAAd,CAAsB;AAACC,kBAAAA,KAAK,EAAC;AAACC,oBAAAA,SAAS,EAACH;AAAX;AAAP,iBAAtB,C;;;AAAhBI,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMJ,E,EAAGK,Q;;;;;;;;uBAEMZ,mBAASC,IAAT,CAAcY,MAAd,CAAqBD,QAArB,EAA8B;AAACH,kBAAAA,KAAK,EAAC;AAACC,oBAAAA,SAAS,EAACH;AAAX;AAAP,iBAA9B,C;;;AAAhBO,gBAAAA,O;;qBACHA,O;;;;;kDACQA,O;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOMd,mBAASC,IAAT,CAAcc,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMDC,W;;;;;;;;uBAEYhB,mBAASC,IAAT,CAAcc,OAAd,CAAsB;AAC1CN,kBAAAA,KAAK,uCACAb,EAAE,CAACqB,EADH,EACS,CACN;AAACP,oBAAAA,SAAS,uCAAMd,EAAE,CAACsB,IAAT,EAAgB,MAAMF,WAAN,GAAoB,GAApC;AAAV,mBADM,EAEN;AAACG,oBAAAA,KAAK,uCAAMvB,EAAE,CAACsB,IAAT,EAAgB,MAAMF,WAAN,GAAoB,GAApC;AAAN,mBAFM,EAGN;AAACI,oBAAAA,EAAE,uCAAMxB,EAAE,CAACsB,IAAT,EAAgB,MAAMF,WAAN,GAAoB,GAApC;AAAH,mBAHM,EAIN;AAACK,oBAAAA,OAAO,uCAAMzB,EAAE,CAACsB,IAAT,EAAgB,MAAMF,WAAN,GAAoB,GAApC;AAAR,mBAJM,EAKN;AAACM,oBAAAA,IAAI,uCAAM1B,EAAE,CAACsB,IAAT,EAAgB,MAAMF,WAAN,GAAoB,GAApC;AAAL,mBALM,CADT;AADqC,iBAAtB,C;;;AAAlBO,gBAAAA,S;;qBAWHA,S;;;;;kDACQA,S;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKYC,S,EAAUC,M,EAAOC,W,EAAYC,Q;;;;;;;;uBAExB3B,mBAASC,IAAT,CAAcc,OAAd,CAAsB;AAC1CN,kBAAAA,KAAK,uCACAb,EAAE,CAACgC,GADH,EACU,CACP;AAACC,oBAAAA,OAAO,EAACL;AAAT,mBADO,EAEP;AAACd,oBAAAA,SAAS,EAACgB;AAAX,mBAFO,EAGP;AAACI,oBAAAA,IAAI,EAACL;AAAN,mBAHO,EAIP;AAACM,oBAAAA,MAAM,EAACJ;AAAR,mBAJO,CADV;AADqC,iBAAtB,C;;;AAAlBJ,gBAAAA,S;;sBAUHnB,MAAM,CAACC,MAAP,CAAckB,SAAd,EAAyBjB,MAAzB,IAAkC,C;;;;;kDAC1BiB,S;;;kDAEA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAORzB,Y","sourcesContent":["import database from '../../models';\nimport sequelize from 'sequelize';\nconst  op = sequelize;\nclass termServices{\n    static async addNew(newEntry){\n        try {\n            const added = await database.Term.create(newEntry);\n            if(Object.values(added).length > 1){\n                return added;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleter(id){\n        try {\n            const deleted = await database.Term.destroy({where:{studentId:id}});\n            if(deleted){\n                return deleted;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async updater(id,updated_){\n        try {\n            const updated = await database.Term.update(updated_,{where:{studentId:id}});\n            if(updated){\n                return updated;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getAll(){\n        try {\n            return await database.Term.findAll();\n\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOne(searchParam){\n        try {\n            const foundTerm = await database.Term.findAll({\n                where : {\n                    [op.or] : [\n                        {studentId : { [op.like]: '%' + searchParam + '%' }},\n                        {maxTj : { [op.like]: '%' + searchParam + '%' }},\n                        {tj : { [op.like]: '%' + searchParam + '%' }},\n                        {maxExam : { [op.like]: '%' + searchParam + '%' }},\n                        {exam : { [op.like]: '%' + searchParam + '%' }},\n                    ]\n                }\n            });\n            if(foundTerm){\n                return foundTerm;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOneComplex(classId_n,term_n,studentId_n,course_n){\n        try {\n            const foundTerm = await database.Term.findAll({\n                where :{\n                    [op.and] : [\n                        {classId:classId_n},\n                        {studentId:studentId_n},\n                        {term:term_n},\n                        {course:course_n}\n                    ]\n                }\n            });\n            if(Object.values(foundTerm).length >=1){\n                return foundTerm;\n            }else{\n                return null;\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n}\nexport default termServices;"],"file":"termServices.js"}